#!/usr/bin/env bash

set \
    -o errexit \
    -o nounset \
    -o pipefail

# required environment variables
: ${ASDF_INSTALL_TYPE?}
: ${ASDF_INSTALL_VERSION?}
: ${ASDF_INSTALL_PATH?}

readonly repository="particledecay/semver"
readonly toolname="semver"

# make a temporary download directory with a cleanup hook
readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "asdf_${toolname}_XXXXXX")"
trap 'rm -rf "${TMP_DOWNLOAD_DIR?}"' EXIT

install() {
    local -r install_type="$1"
    local -r version="$2"
    local -r install_path="$3"

    local -r bin_install_path="${install_path}/bin"
    local -r download_url="$(get_download_url "${version}")"
    local -r download_path="${TMP_DOWNLOAD_DIR}/$(basename "${download_url}")"

    echo "Downloading ${toolname} version ${version} from ${download_url}"
    if curl -fsL "${download_url}" -o "${download_path}"; then
        echo "Cleaning ${toolname} previous binaries"
        rm -rf "${bin_install_path}/${toolname}"

        echo "Creating ${toolname} bin directory"
        mkdir -p "${bin_install_path}"

        echo "Moving ${toolname} to ${bin_install_path}"
        mv "${download_path}" "${bin_install_path}/${toolname}" && \
        chmod +x "${bin_install_path}/${toolname}"
        if [ $? -ne 0 ]; then
            echo "Error: could not move ${toolname} to install location" >&2
            exit 1
        fi
    else
        echo "Error: ${toolname} version ${version} not found" >&2
        exit 1
    fi
}

get_arch() {
    uname | tr '[:upper:]' '[:lower:]'
}

get_download_url() {
    local -r version="$1"
    local -r arch="$(get_arch)"
    echo "https://github.com/$repository/releases/download/$version/${toolname}-${arch}-amd64"
}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"
